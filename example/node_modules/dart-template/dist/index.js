"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var capitalize = function (s) {
    return (s[0] || "").toUpperCase() + s.slice(1, s.length);
};
var uncapitalize = function (s) {
    return (s[0] || "").toLowerCase() + s.slice(1, s.length);
};
var getFullName = function (op) {
    return capitalize(op.name) + capitalize(op.operationType);
};
var mappedType = function (type) {
    var types = {
        String: "String",
        Int: "int",
        Float: "double",
        Boolean: "bool",
        ID: "String"
    };
    if (types[type]) {
        return types[type];
    }
    return "dynamic";
};
var _ErrorLogged = /** @class */ (function (_super) {
    __extends(_ErrorLogged, _super);
    function _ErrorLogged(r) {
        var _this = this;
        console.error(r);
        _this = _super.call(this, r) || this;
        return _this;
    }
    return _ErrorLogged;
}(Error));
var ErrorLogged = function (r) { return new _ErrorLogged(r); };
var processLeaf = function (selection) {
    var isRequired = selection.isRequired, type = selection.type, name = selection.name;
    if (isRequired) {
        return mappedType(type) + " get " + name + " => this._d[\"" + name + "\"];";
    }
    else {
        return "Option<" + mappedType(type) + "> get " + name + " => option(this._d[\"" + name + "\"]!=null, this._d[\"" + name + "\"]);";
    }
};
var declareField = function (name, fields) {
    var processedSet = processSelectionSet(fields, name);
    return processedSet.topLevel + "\n  class " + name + " {\n    " + name + "(this._d);\n  \n    final Map<String, dynamic> _d;\n  \n    " + processedSet.content + "\n  \n    String toString() {\n        return this._d.toString();\n    }\n  }\n  ";
};
var processField = function (selection, parentName) {
    var isRequired = selection.isRequired, type = selection.type, name = selection.name, isArray = selection.isArray;
    var fieldType = "" + parentName + capitalize(type);
    var content = "";
    if (isRequired) {
        if (isArray) {
            content = "List<" + fieldType + "> get " + name + " => (this._d[\"" + name + "\"] as List).map<" + fieldType + ">((" + uncapitalize(type) + ") => " + fieldType + "(" + uncapitalize(type) + ")).toList();";
        }
        else {
            content = fieldType + " get " + name + " => " + fieldType + "(this._d[\"" + name + "\"]);";
        }
    }
    else {
        if (isArray) {
            content = "List<Option<" + fieldType + ">> get " + name + " => (this._d[\"" + name + "\"] as List).map<Option<" + fieldType + ">>((" + uncapitalize(type) + ") => option(" + uncapitalize(type) + "!=null, " + fieldType + "(" + uncapitalize(type) + "))).toList();";
        }
        else {
            content = "Option<" + fieldType + "> get " + name + " => option(this._d[\"" + name + "\"]!=null, " + fieldType + "(this._d[\"" + name + "\"]));";
        }
    }
    return {
        content: content,
        topLevel: declareField(fieldType, selection.selectionSet)
    };
};
var processSelectionSet = function (selectionSet, parentName) {
    var _topLevel = [];
    var content = selectionSet
        .map(function (selection) {
        var isSelectionSetFieldNode = function (s) {
            return typeof s.dimensionOfArray === "number";
        };
        if (selection.isLeaf && isSelectionSetFieldNode(selection)) {
            return processLeaf(selection);
        }
        else if (selection.isField && isSelectionSetFieldNode(selection)) {
            var result = processField(selection, parentName);
            _topLevel.push(result.topLevel);
            return result.content;
        }
        throw ErrorLogged("processSelectionSet: Not implemented");
    })
        .join("\n  ");
    return { content: content, topLevel: _topLevel.join("\n") };
};
var processVariables = function (op) {
    if (op.hasVariables) {
        var argsList = op.variables
            .map(function (_a) {
            var type = _a.type, name = _a.name, isRequired = _a.isRequired;
            return "" + (isRequired ? "@required " : "") + mappedType(type) + " " + name;
        })
            .join(", ");
        var body = op.variables
            .map(function (_a) {
            var name = _a.name;
            return "\"" + name + "\": " + name;
        })
            .join("\n");
        return "Map<String, dynamic> " + uncapitalize(op.name) + "Variables({" + argsList + "}) {\n      return {\n          " + body + "\n      };\n  }";
    }
    return "";
};
var processOperation = function (op) {
    var processedSet = processSelectionSet(op.selectionSet, capitalize(op.name));
    var variables = processVariables(op);
    return "import 'package:dartz/dartz.dart';\n  import 'package:flutter/foundation.dart';\n  " + variables + "\n  " + processedSet.topLevel + "\n  class " + capitalize(op.name) + " {\n    " + capitalize(op.name) + "(this._d);\n  \n    final Map<String, dynamic> _d;\n  \n    " + processedSet.content + "\n  }";
};
function default_1(templateContext, mergedDocuments, settings) {
    return mergedDocuments.operations.map(function (op) {
        return {
            filename: getFullName(op) + ".dart",
            content: processOperation(op)
        };
    });
}
exports["default"] = default_1;
