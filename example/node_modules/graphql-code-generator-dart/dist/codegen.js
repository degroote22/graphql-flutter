"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var commander = require("commander");
var path = require("path");
var fs = require("fs");
var mkdirp = require("mkdirp");
var documents_glob_1 = require("./utils/documents-glob");
var document_loader_1 = require("./loaders/documents/document-loader");
var templates_scanner_1 = require("./loaders/template/templates-scanner");
var graphql_codegen_compiler_1 = require("graphql-codegen-compiler");
var graphql_codegen_core_1 = require("graphql-codegen-core");
var introspection_from_file_1 = require("./loaders/schema/introspection-from-file");
var introspection_from_url_1 = require("./loaders/schema/introspection-from-url");
var schema_from_typedefs_1 = require("./loaders/schema/schema-from-typedefs");
var schema_from_export_1 = require("./loaders/schema/schema-from-export");
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
function collect(val, memo) {
    memo.push(val);
    return memo;
}
exports.initCLI = function (args) {
    commander
        .usage('gql-gen [options]')
        .option('-s, --schema <path>', 'Path to GraphQL schema: local JSON file, GraphQL endpoint, local file that exports GraphQLSchema/AST/JSON')
        .option('-h, --header [header]', 'Header to add to the introspection HTTP request when using --url/--schema with url', collect, [])
        .option('-t, --template <template-name>', 'Language/platform name templates, or a name of NPM modules that `export default` GqlGenConfig object')
        .option('-p, --project <project-path>', 'Project path(s) to scan for custom template files')
        .option('--config <json-file>', 'Codegen configuration file, defaults to: ./gql-gen.json')
        .option('-m, --skip-schema', 'Generates only client side documents, without server side schema types')
        .option('-c, --skip-documents', 'Generates only server side schema types, without client side documents')
        .option('-o, --out <path>', 'Output file(s) path', String, './')
        .option('-r, --require [require]', 'module to preload (option can be repeated)', collect, [])
        .option('-ow, --no-overwrite', 'Skip file writing if the output file(s) already exists in path')
        .option('-w, --watch', 'Watch for changes and execute generation automatically')
        .arguments('<options> [documents...]')
        .parse(args);
    return commander;
};
exports.cliError = function (err) {
    graphql_codegen_core_1.logger.error(err);
    process.exit(1);
    return;
};
exports.validateCliOptions = function (options) {
    var schema = options.schema;
    var template = options.template;
    var project = options.project;
    if (!schema) {
        exports.cliError('Flag --schema is missing!');
    }
    if (!template && !project) {
        exports.cliError('Please specify language/platform, using --template flag, or specify --project to generate with custom project!');
    }
};
var schemaHandlers = [
    new introspection_from_url_1.IntrospectionFromUrlLoader(),
    new introspection_from_file_1.IntrospectionFromFileLoader(),
    new schema_from_typedefs_1.SchemaFromTypedefs(),
    new schema_from_export_1.SchemaFromExport()
];
exports.executeWithOptions = function (options) { return __awaiter(_this, void 0, void 0, function () {
    var schema, documents, template, project, gqlGenConfigFilePath, out, generateSchema, generateDocuments, modulesToRequire, templateConfig, localFilePath, localFileExists, templateFromExport, configPath, config, templates, resolvedHelpers_1, relevantEnvVars, executeGeneration, normalizeOutput;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                exports.validateCliOptions(options);
                schema = options.schema;
                documents = options.args || [];
                template = options.template;
                project = options.project;
                gqlGenConfigFilePath = options.config || './gql-gen.json';
                out = options.out || './';
                generateSchema = !options.skipSchema;
                generateDocuments = !options.skipDocuments;
                modulesToRequire = options.require || [];
                modulesToRequire.forEach(function (mod) { return require(mod); });
                templateConfig = null;
                if (template && template !== '') {
                    graphql_codegen_core_1.debugLog("[executeWithOptions] using template: " + template);
                    // Backward compatibility for older versions
                    if (template === 'ts' ||
                        template === 'ts-single' ||
                        template === 'typescript' ||
                        template === 'typescript-single') {
                        template = 'graphql-codegen-typescript-template';
                    }
                    else if (template === 'ts-multiple' || template === 'typescript-multiple') {
                        template = 'graphql-codegen-typescript-template-multiple';
                    }
                    localFilePath = path.resolve(process.cwd(), template);
                    localFileExists = fs.existsSync(localFilePath);
                    templateFromExport = require(localFileExists ? localFilePath : template);
                    if (!templateFromExport) {
                        throw new Error("Unknown codegen template: " + template + ", please make sure it's installed using npm/Yarn!");
                    }
                    else {
                        templateConfig = templateFromExport.default || templateFromExport.config || templateFromExport;
                    }
                }
                graphql_codegen_core_1.debugLog("[executeWithOptions] using project: " + project);
                configPath = path.resolve(process.cwd(), gqlGenConfigFilePath);
                config = null;
                if (fs.existsSync(configPath)) {
                    graphql_codegen_core_1.logger.info('Loading config file from: ', configPath);
                    config = JSON.parse(fs.readFileSync(configPath).toString());
                    graphql_codegen_core_1.debugLog("[executeWithOptions] Got project config JSON: ", config);
                }
                if (project && project !== '') {
                    if (config === null) {
                        throw new Error("To use project feature, please specify --config path or create gql-gen.json in your project root!");
                    }
                    templates = templates_scanner_1.scanForTemplatesInPath(project, graphql_codegen_compiler_1.ALLOWED_CUSTOM_TEMPLATE_EXT);
                    resolvedHelpers_1 = {};
                    Object.keys(config.customHelpers || {}).map(function (helperName) {
                        var filePath = config.customHelpers[helperName];
                        var resolvedPath = path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
                        if (fs.existsSync(resolvedPath)) {
                            var requiredFile = require(resolvedPath);
                            if (requiredFile && requiredFile && typeof requiredFile === 'function') {
                                resolvedHelpers_1[helperName] = requiredFile;
                            }
                            else {
                                throw new Error("Custom template file " + resolvedPath + " does not have a default export function!");
                            }
                        }
                        else {
                            throw new Error("Custom template file " + helperName + " does not exists in path: " + resolvedPath);
                        }
                    });
                    templateConfig = {
                        inputType: graphql_codegen_core_1.EInputType.PROJECT,
                        templates: templates,
                        flattenTypes: config.flattenTypes,
                        primitives: config.primitives,
                        customHelpers: resolvedHelpers_1
                    };
                }
                relevantEnvVars = Object.keys(process.env)
                    .filter(function (name) { return name.startsWith('CODEGEN_'); })
                    .reduce(function (prev, name) {
                    var cleanName = name
                        .replace('CODEGEN_', '')
                        .toLowerCase()
                        .replace(/[-_]+/g, ' ')
                        .replace(/[^\w\s]/g, '')
                        .replace(/ (.)/g, function (res) { return res.toUpperCase(); })
                        .replace(/ /g, '');
                    var value = process.env[name];
                    if (value === 'true') {
                        value = true;
                    }
                    else if (value === 'false') {
                        value = false;
                    }
                    prev[cleanName] = value;
                    return prev;
                }, {});
                if (graphql_codegen_core_1.isGeneratorConfig(templateConfig)) {
                    templateConfig.config = __assign({}, (config && config.generatorConfig ? config.generatorConfig || {} : {}), (relevantEnvVars || {}));
                    if (templateConfig.deprecationNote) {
                        graphql_codegen_core_1.logger.warn("Template " + template + " is deprecated: " + templateConfig.deprecationNote);
                    }
                }
                executeGeneration = function () { return __awaiter(_this, void 0, void 0, function () {
                    var schemaExportPromise, _i, schemaHandlers_1, handler, graphQlSchema, context, documentSourcesResult, _a, _b, graphQLErrors, _c, graphQLErrors_1, graphQLError, transformedDocuments;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                schemaExportPromise = null;
                                _i = 0, schemaHandlers_1 = schemaHandlers;
                                _d.label = 1;
                            case 1:
                                if (!(_i < schemaHandlers_1.length)) return [3 /*break*/, 4];
                                handler = schemaHandlers_1[_i];
                                return [4 /*yield*/, handler.canHandle(schema)];
                            case 2:
                                if (_d.sent()) {
                                    schemaExportPromise = handler.handle(schema, options);
                                    return [3 /*break*/, 4];
                                }
                                _d.label = 3;
                            case 3:
                                _i++;
                                return [3 /*break*/, 1];
                            case 4:
                                if (!schemaExportPromise) {
                                    exports.cliError('Invalid --schema provided, please use a path to local file, HTTP endpoint or a glob expression!');
                                }
                                return [4 /*yield*/, schemaExportPromise];
                            case 5:
                                graphQlSchema = _d.sent();
                                if (process.env.VERBOSE !== undefined) {
                                    graphql_codegen_core_1.logger.info("GraphQL Schema is: ", graphQlSchema);
                                }
                                context = graphql_codegen_core_1.schemaToTemplateContext(graphQlSchema);
                                graphql_codegen_core_1.debugLog("[executeWithOptions] Schema template context build, the result is: ");
                                Object.keys(context).forEach(function (key) {
                                    if (Array.isArray(context[key])) {
                                        graphql_codegen_core_1.debugLog("Total of " + key + ": " + context[key].length);
                                    }
                                });
                                _a = document_loader_1.loadDocumentsSources;
                                _b = [graphQlSchema];
                                return [4 /*yield*/, documents_glob_1.documentsFromGlobs(documents)];
                            case 6:
                                documentSourcesResult = _a.apply(void 0, _b.concat([_d.sent()]));
                                if (Array.isArray(documentSourcesResult) && documentSourcesResult.length > 0) {
                                    graphQLErrors = documentSourcesResult;
                                    for (_c = 0, graphQLErrors_1 = graphQLErrors; _c < graphQLErrors_1.length; _c++) {
                                        graphQLError = graphQLErrors_1[_c];
                                        graphql_codegen_core_1.logger.error(graphQLError.message);
                                    }
                                    exports.cliError('Found errors when validating queries against schema');
                                }
                                transformedDocuments = graphql_codegen_core_1.transformDocument(graphQlSchema, documentSourcesResult);
                                return [2 /*return*/, graphql_codegen_compiler_1.compileTemplate(templateConfig, context, [transformedDocuments], {
                                        generateSchema: generateSchema,
                                        generateDocuments: generateDocuments
                                    })];
                        }
                    });
                }); };
                normalizeOutput = function (item) {
                    var resultName = item.filename;
                    if (!path.isAbsolute(resultName)) {
                        var resolved = path.resolve(process.cwd(), out);
                        if (fs.existsSync(resolved)) {
                            var stats = fs.lstatSync(resolved);
                            if (stats.isDirectory()) {
                                resultName = path.resolve(resolved, item.filename);
                            }
                            else if (stats.isFile()) {
                                resultName = resolved;
                            }
                        }
                        else {
                            if (out.endsWith('/')) {
                                resultName = path.resolve(resolved, item.filename);
                            }
                            else {
                                resultName = resolved;
                            }
                        }
                    }
                    var resultDir = path.dirname(resultName);
                    mkdirp.sync(resultDir);
                    return {
                        content: item.content,
                        filename: resultName
                    };
                };
                return [4 /*yield*/, executeGeneration()];
            case 1: return [2 /*return*/, (_a.sent()).map(normalizeOutput)];
        }
    });
}); };
//# sourceMappingURL=codegen.js.map