"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_codegen_core_1 = require("graphql-codegen-core");
var request_1 = require("request");
var valid_url_1 = require("valid-url");
var IntrospectionFromUrlLoader = /** @class */ (function () {
    function IntrospectionFromUrlLoader() {
    }
    IntrospectionFromUrlLoader.prototype.canHandle = function (pointerToSchema) {
        return !!valid_url_1.isUri(pointerToSchema);
    };
    IntrospectionFromUrlLoader.prototype.handle = function (url, cliOptions) {
        graphql_codegen_core_1.logger.info("Loading GraphQL Introspection from remote: " + url + "...");
        var splittedHeaders = (cliOptions.header || [])
            .map(function (header) {
            var _a;
            var result = header.match(/^(.*?)[:=]{1}(.*?)$/);
            if (result && result.length > 0) {
                var name = result[1];
                var value = result[2];
                return _a = {},
                    _a[name] = value,
                    _a;
            }
            return null;
        })
            .filter(function (item) { return item; });
        var extraHeaders = __assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, splittedHeaders.reduce(function (prev, item) { return (__assign({}, prev, item)); }, {}));
        graphql_codegen_core_1.debugLog("Executing POST to " + url + " with headers: ", extraHeaders);
        return new Promise(function (resolve, reject) {
            request_1.post({
                url: url,
                json: {
                    query: graphql_codegen_core_1.introspectionQuery.replace('locations', '')
                },
                headers: extraHeaders
            }, function (err, response, body) {
                if (err) {
                    reject(err);
                    return;
                }
                var bodyJson = body.data;
                if (!bodyJson || (body.errors && body.errors.length > 0)) {
                    reject('Unable to download schema from remote: ' + body.errors.map(function (item) { return item.message; }).join(', '));
                    return;
                }
                graphql_codegen_core_1.validateIntrospection(bodyJson);
                resolve(graphql_codegen_core_1.introspectionToGraphQLSchema(bodyJson));
            });
        });
    };
    return IntrospectionFromUrlLoader;
}());
exports.IntrospectionFromUrlLoader = IntrospectionFromUrlLoader;
//# sourceMappingURL=introspection-from-url.js.map